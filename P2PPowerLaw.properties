# the total number of peers
total_peers = 1000

# Peers with the highest bandwidth become super peers - this determines how
# many. For example, if you have 100 total peers and set this to be 25, the
# network will have a total of 25 super peers. No guarantees - this is statistical.
super_peer_percentage = 3

# how many Super Peer addresses sent back by the Host Cache
host_cache.max_neighbours = 20

# how many peers a super peer can manage
super_peer.max_peers = 60

# the min and max number of connected super nodes for an Ordinary Peer
ordinary_peer.min_connections = 1
ordinary_peer.max_connections  = 1

# the min and max number of connected super nodes for a Super Peer.
super_peer.min_connections = 2
super_peer.max_connections = 2

# the list of shared and wanted files for all peers. NB: these filenames must
# not contain ';'.
peer.shared_files = Gentoo.iso, Arch.iso, Fedora.ISO
peer.wanted_files = Ubuntu.iso

# Override an individual peer in order to represent Scenario 1, where
# one peer has a file everyone else wants. This peer will be ordinary.
custom_peer = true
custom_peer.shared_files = Ubuntu.iso

# This is how often to log the state of the network, in milliseconds
runner.report_interval_ms = 1000

# A special stats message is sent to an observer of the network whenever
# a peer successfully connects or manages to acquire all of their wanted
# files.
#
# An extra stats message can be sent every x number of messages, as below
#
# This determines the accuracy of the message count.  If set to 10, the
# count for number of messages sent overall and per peer will be accurate
# to within 10*peer_count messages.
agent.send_stats_every = 50

# The simulation will stop when either everyone has acquired their files,
# or the total number of messages sent exceeds this limit
runner.total_message_limit = 1000000

# If a peer has a file in their wantedFiles list, they will request it
# with a gap of milliseconds specified here.
peer.search_interval_ms = 3000


