# the total number of peers
total_peers = 500

# Peers with the highest bandwidth become super peers - this determines how
# many. For example, if you have 100 total peers and set this to be 25, the
# network will have a total of 25 super peers. No guarantees - this is statistical.
super_peer_percentage = 20

# how many Super Peer addresses sent back by the Host Cache
host_cache.max_neighbours = 5

# how many peers a super peer can manage
super_peer.max_peers = 10

# the min and max number of connected super nodes for an Ordinary Peer
ordinary_peer.min_connections = 1
ordinary_peer.max_connections  = 1

# the min and max number of connected super nodes for a Super Peer.
super_peer.min_connections = 3
super_peer.max_connections = 3

# SCENARIO 1


# the list of shared and wanted files for all peers.
peer.shared_files = Ubuntu.iso
peer.wanted_files = Fedora.iso

# Override an individual peer in order to represent Scenario 1, where
# one peer has a file everyone else wants. This peer will be ordinary.
peer.override = true
peer.override.shared_files = Ubuntu.iso, Fedora.iso

# This is how often to log the state of the network, in milliseconds
runner.report_interval_ms = 1000

# A special stats message is sent to an observer of the network whenever
# a peer successfully connects or manages to acquire all of their wanted
# files.
#
# An extra stats message can be sent every x number of messages, as below
#
# This determines the accuracy of the message count.  If set to 10, the
# count for number of messages sent overall and per peer will be accurate
# to within 10 messages.
agent.send_stats_every = 100



