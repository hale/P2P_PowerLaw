=============
FROM THE SPEC
=============

HOST CACHE - Maintains a list of connected peers.
* Supplies a list networked Super Peer IDs.
* Registers a Peer on the network.

PEER
* Joins the network by registering with the Host Cache.
* Requests the Super Peer for a shared file.
* Simulates transferal of a file from/to another Peer.

  NORMAL PEER
  * Connects to one Super Peer from a list of IDs given by the Host Cache.
  * Gives the Super Peer its list of shared files.
  * Connects to another Super Peer in the event of disconnection.

  SUPER PEER
  * Can be connected to by other Peers.
  * Connects to several Super Peers from a list of IDs given by the Host Cache.
  * Maintains a list of shared files for each connected Normal Peer.
  * Responds to requests by searching it's list of shared files.
  * Follows the document-request-model to forward requests for files it does not have.


==========
BEHAVIOURS
==========

HOST CACHE
* Receive request neighbours; send neighbours response

ALL PEERS
* Send request neighbours
* Receive neighbours response
* Send connect request
* Send search for file
* Receive search response; send request for file.
* Receive request for file; send file response.
* Receive file response

ORDINARY PEERS
* Send file list

SUPER PEERS
* Receive connect request; send connection response (succ/fail)
* Receive file list
* Receive search request; send search_response
* Receive search response, send search response
* Receive search request; send search request

== HOST CACHE ==

RECEIVE NEIGHBOURS REQUEST (HOST_CACHE)
  // receive neighbours_request
  if_not peerList.contains(peer) {
    // decide if peer is ordinary or super
    addPeer(peer, isSuper);
  }
  // send neighbours_response with list of super peers

== ORDINARY PEERS ==

SEND FILE LIST (ORDINARY)
  if_not (hasConnectedPeer) {
    setNeedsToSendFiles(true);
  }
  if (needsToSendFiles && hasConnectedPeer) 
    // send files_list message to connected peer.
    setNeedsToSendFiles(false);
  }

RECEIVE SEARCH RESULT
  // receive search_response message
  // remove file from wanted files list
  // add file to shared file list

== ALL PEERS ==

SEND REQUEST NEIGHBOURS
  if (knownPeers.empty()) {
    // send request_neighbours
  }

RECEIVE NEIGHBOURS RESPONSE
    // receive neighbours_response message
    knownPeers.add(message.peers())
    }

SEND CONNECT REQUEST
  if (!knownPeers.empty() && (connectedPeers + connectPendingPeers).size < MIN_PEERS) {
    peer = (connectedPeers - connectPendingPeers).next()
    // send request_connection to peer
    connectPendingPeers.add(peer)
  }

RECEIVE CONNECT RESPONSE
  // receive connection_response message
  connectPendingPeers.remove(peer)
  if (connectSucceed) {
    connectedPeers.add(peer)
  }

SEND FILE SEARCH
  if (!connectedPeers.empty() && !wantedFiles.empty()) {
    // send search_file message to connected peer, for any wanted file

RECEIVE REQUEST FILE
  // receive request_file message from peer
  // send file_response message to peer

RECEIVE FILE
  // receive file_response message from peer
  setNeedsToSearch(false)

== SUPER PEERS ==

RECEIVE CONNECTION
  // receive request_connection message
  if (peerList.size() < MAX_PEERS) {
    peerList.add(peer)
    // send connection_response message
  }

RECEIVE FILE LIST
  // receive files_list message
  // store peer and its list of files

RECEIVE SEARCH REQUEST
  // receive search_request message
  msg.addRequester(msg.sender())
  // search file list for file
  if (fileFound) {
    // send msg.sender() search_response message
  } else {
    // send search_request to each connected super peer
    // document routing?
  }

RECEIVE SEARCH RESPONSE
  // receive search_response message
  peer = msg.requesters.pop()
  if (peer == null) {
    needsToSearch = false
  else {
    // send request_file message to peer
  }










PEER STATES
* Waiting for peers
* Connecting to peers
* Sending file list (ORDINARY)

NORMAL PEER BEHAVIOURS

REGISTER
* Ask Host Cache to join network.

ASK FOR PEERS
* Ask Host Cache for Peers.
* Mark as "Waiting for peers".

RECEIVE SUPER PEERS BEHAVIOUR
* Nothing unless "Waiting for peers".
* Receive a message with list of Super Peers
* Remember this list.
* Mark as "Waiting for connection"

CONNECT TO PEER BEHAVIOUR
* 

* Ask one of the Super Peers given earlier if we can connect. Mark as "Wait for connection request response"
* Receive a ConnectionResponseFailure message. Remove that peer from the list. Mark as "Waiting for connection".
* List of Super Peers is empty.  
* Receive a ConnectionResponseSuccess message. Mark as "Waiting for peers"


BEGIN -> Waiting for Connection -> Waiting for Connection Request Response -> 
BEGIN -> Waiting for Connection -> Waiting for Connection Request Response -> Waiting for Connection -> 
